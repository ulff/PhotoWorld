<?php

namespace Ulff\PhotoWorldBundle\Entity\Repository;

use Doctrine\ORM\EntityRepository;

/**
 * PhotoRepository
 *
 * This class was generated by the Doctrine ORM. Add your own custom
 * repository methods below.
 */
class PhotoRepository extends EntityRepository {
    
    public function getPhotoList($params = array()) {
        $qb = $this->createQueryBuilder('p');
        $qb->select('p');
        $qb->addOrderBy('p.sortnumber');

        if (!empty($params['limit'])) {
            $qb->setMaxResults($params['limit']);
        }
        
        if (!empty($params['albumid'])) {
            $qb->andWhere('p.album = :albumid')->setParameter('albumid', $params['albumid']);
        }

        return $qb->getQuery()->getResult();
    }
    
    public function getNextPhoto($photo, $albumid) {
        $qb = $this->createQueryBuilder('p');
        $qb->select('p');
        $qb->addOrderBy('p.sortnumber');

        $qb->setMaxResults(1);
        
        $qb->andWhere('p.sortnumber > :photosortnumber')->setParameter('photosortnumber', $photo->getSortnumber());
        $qb->andWhere('p.album = :albumid')->setParameter('albumid', $albumid);
        
        $nextPhoto = $qb->getQuery()->getResult();
        return reset($nextPhoto);
    }
    
    public function getPreviousPhoto($photo, $albumid) {
        $qb = $this->createQueryBuilder('p');
        $qb->select('p');
        $qb->addOrderBy('p.sortnumber', 'DESC');

        $qb->setMaxResults(1);
        
        $qb->andWhere('p.sortnumber < :photosortnumber')->setParameter('photosortnumber', $photo->getSortnumber());
        $qb->andWhere('p.album = :albumid')->setParameter('albumid', $albumid);
        
        $previousPhoto = $qb->getQuery()->getResult();
        return reset($previousPhoto);
    }
    
    public function getPhotoByPath($path) {
        $qb = $this->createQueryBuilder('p');
        $qb->select('p');
        $qb->andWhere('p.path = :path')->setParameter('path', $path);

        return $qb->getQuery()->getResult();
    }

    public function getAlbumMaxSortNumber($albumid) {
        $qb = $this->createQueryBuilder('p');
        $qb->select('p');
        $qb->addOrderBy('p.sortnumber', 'DESC');
        $qb->setMaxResults(1);
        $qb->andWhere('p.album = :albumid')->setParameter('albumid', $albumid);
        $previousPhoto = $qb->getQuery()->getResult();

        if(empty($previousPhoto)) {
            return 0;
        }
        $previousPhoto = reset($previousPhoto);
        return $previousPhoto->getSortnumber();
    }

}
